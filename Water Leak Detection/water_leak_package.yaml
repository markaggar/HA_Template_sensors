# Water Leak Detection Package v5 (Final Complete - No Binary Sensors)
#
# - Removed unnecessary binary sensors (logic moved to automations)
# - Toilet burst sensor state shows count of largest group
# - Correct low flow sensors with proper filtering and statistics
# - Last Water Session sensor included
# - Flow/volume sensors as attributes for maintainability
# - Enhanced debugging attributes
# - Fully ready for Home Assistant 2024+

input_boolean:
  leaky_toilet_smart_detected:
    name: Leaky Toilet Detected (Smart)
    icon: mdi:toilet-alert
  low_flow_leak_detected:
    name: Low Flow Leak Detected
    icon: mdi:water-alert

input_button:
  acknowledge_leaky_toilet_smart:
    name: Acknowledge Leaky Toilet Alert (Smart)
    icon: mdi:check-decagram
  acknowledge_low_flow_leak:
    name: Acknowledge Low Flow Leak Alert
    icon: mdi:check-decagram

sensor:
  - name: "Low Flow 1m Update"
    unique_id: low_flow_1m_update
    unit_of_measurement: "GPM"
    device_class: water
    state_class: measurement
    state: >
      {% set val = states('sensor.droplet_flow_rate') | float(0) %}
      {% if 0 < val and val < 1 %}
        {{ val }}
      {% else %}
        0
      {% endif %}
    attributes:
      last_update: "{{ now() }}"
  - platform: template
    sensors:
      last_water_session:
        friendly_name: "Last Water Session"
        unit_of_measurement: "gallons"
        value_template: >
          {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
          {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
          {% set flow = states(flow_sensor) | float(0) %}
          {% set volume = states(volume_sensor) | float(0) %}
          {% set prev_volume = this.attributes.prev_integration | default(volume) %}
          {% set session_active = this.attributes.session_active | default(false) %}
          {% set session_start_vol = this.attributes.session_start_vol | default(volume) %}
          {% set min_flow = this.attributes.min_flow | default(0.1) %}
          {% set now_ts = as_timestamp(now()) %}
          {% set last_session_end = this.attributes.last_session_end | default(now_ts) %}
          {% set session_timeout = this.attributes.session_timeout | default(300) %}
          {% set time_since_last = now_ts - last_session_end %}
          {% if flow >= min_flow %}
            {{ (volume - session_start_vol) | round(2) }}
          {% elif session_active and time_since_last < session_timeout %}
            {{ (prev_volume - session_start_vol) | round(2) }}
          {% else %}
            {{ this.attributes.last_session_gallons | default(0) }}
          {% endif %}
        attribute_templates:
          flow_sensor: "{{ this.attributes.flow_sensor | default('sensor.droplet_flow_rate') }}"
          volume_sensor: "{{ this.attributes.volume_sensor | default('sensor.droplet_water_volume') }}"
          min_flow: "{{ this.attributes.min_flow | default(0.1) }}"
          session_timeout: "{{ this.attributes.session_timeout | default(300) }}"
          session_active: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor) | float(0) %}
            {% set min_flow = this.attributes.min_flow | default(0.1) %}
            {{ flow >= min_flow }}
          session_start_vol: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
            {% set flow = states(flow_sensor) | float(0) %}
            {% set volume = states(volume_sensor) | float(0) %}
            {% set min_flow = this.attributes.min_flow | default(0.1) %}
            {% set prev_active = this.attributes.session_active | default(false) %}
            {% set prev_start_vol = this.attributes.session_start_vol | default(volume) %}
            {% if flow >= min_flow %}
              {% if prev_active %}
                {{ prev_start_vol }}
              {% else %}
                {{ volume }}
              {% endif %}
            {% else %}
              {{ volume }}
            {% endif %}
          prev_integration: >
            {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
            {{ states(volume_sensor) | float(0) }}
          last_session_gallons: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
            {% set flow = states(flow_sensor) | float(0) %}
            {% set volume = states(volume_sensor) | float(0) %}
            {% set session_active = this.attributes.session_active | default(false) %}
            {% set prev_volume = this.attributes.prev_integration | default(volume) %}
            {% set session_start_vol = this.attributes.session_start_vol | default(volume) %}
            {% set min_flow = this.attributes.min_flow | default(0.1) %}
            {% set now_ts = as_timestamp(now()) %}
            {% set session_timeout = this.attributes.session_timeout | default(300) %}
            {% set last_session_end = this.attributes.last_session_end | default(now_ts) %}
            {% if not session_active and (prev_volume - session_start_vol) > 0 %}
              {{ (prev_volume - session_start_vol) | round(2) }}
            {% else %}
              {{ this.attributes.last_session_gallons | default(0) }}
            {% endif %}
          last_session_end: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor) | float(0) %}
            {% set session_active = this.attributes.session_active | default(false) %}
            {% set min_flow = this.attributes.min_flow | default(0.1) %}
            {% set now_ts = as_timestamp(now()) %}
            {% if not session_active and flow < min_flow %}
              {{ now_ts }}
            {% else %}
              {{ this.attributes.last_session_end | default(now_ts) }}
            {% endif %}
          last_session_duration: >
            {% set last_end = this.attributes.last_session_end | default(0) %}
            {% set session_timeout = this.attributes.session_timeout | default(300) %}
            {% set now_ts = as_timestamp(now()) %}
            {% if last_end > 0 and (now_ts - last_end) < session_timeout %}
              {{ session_timeout | round(0) }}
            {% else %}
              {{ this.attributes.last_session_duration | default(0) }}
            {% endif %}
      toilet_burst_session:
        friendly_name: "Toilet Burst Session"
        unit_of_measurement: "count"
        value_template: >
          {% set bursts_raw = state_attr('sensor.toilet_burst_session','bursts') or '[]' %}
          {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
          {% set min_group = this.attributes.burst_min_group | default(0) %}
          {% set threshold = this.attributes.burst_group_threshold | default(0) %}
          {% set max_group_size = namespace(value=0) %}
          {% for b in bursts %}
            {% set matches = bursts
              | selectattr('volume','>=',b.volume - threshold)
              | selectattr('volume','<=',b.volume + threshold)
              | list %}
            {% if matches | length > max_group_size.value %}
              {% set max_group_size.value = matches | length %}
            {% endif %}
          {% endfor %}
          {{ max_group_size.value }}
        attribute_templates:
          flow_sensor: "{{ this.attributes.flow_sensor | default('sensor.droplet_flow_rate') }}"
          volume_sensor: "{{ this.attributes.volume_sensor | default('sensor.droplet_water_volume') }}"
          burst_min_flow: "{{ this.attributes.burst_min_flow | default(0.5) }}"
          burst_max_flow: "{{ this.attributes.burst_max_flow | default(2.5) }}"
          burst_min_duration: "{{ this.attributes.burst_min_duration | default(10) }}"
          burst_max_duration: "{{ this.attributes.burst_max_duration | default(60) }}"
          burst_window: "{{ this.attributes.burst_window | default(3600) }}"
          burst_min_group: "{{ this.attributes.burst_min_group | default(4) }}"
          burst_group_threshold: "{{ this.attributes.burst_group_threshold | default(0.3) }}"
          largest_group_count: >
            {% set bursts_raw = this.attributes.bursts or '[]' %}
            {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
            {% set threshold = this.attributes.burst_group_threshold | default(0) %}
            {% set max_group_size = namespace(value=0) %}
            {% for b in bursts %}
              {% set matches = bursts
                | selectattr('volume','>=',b.volume - threshold)
                | selectattr('volume','<=',b.volume + threshold)
                | list %}
              {% if matches | length > max_group_size.value %}
                {% set max_group_size.value = matches | length %}
              {% endif %}
            {% endfor %}
            {{ max_group_size.value }}
          largest_group_volumes: >
            {% set bursts_raw = this.attributes.bursts or '[]' %}
            {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
            {% set threshold = this.attributes.burst_group_threshold | default(0) %}
            {% set max_group = namespace(volumes=[]) %}
            {% set max_size = namespace(value=0) %}
            {% for b in bursts %}
              {% set matches = bursts
                | selectattr('volume','>=',b.volume - threshold)
                | selectattr('volume','<=',b.volume + threshold)
                | list %}
              {% if matches | length > max_size.value %}
                {% set max_size.value = matches | length %}
                {% set max_group.volumes = matches | map(attribute='volume') | list %}
              {% endif %}
            {% endfor %}
            {{ max_group.volumes }}
          session_active: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor)|float(0) %}
            {% set burst_min_flow = this.attributes.burst_min_flow | default(0) %}
            {% set burst_max_flow = this.attributes.burst_max_flow | default(0) %}
            {% if flow >= burst_min_flow and flow <= burst_max_flow %}
              true
            {% else %}
              false
            {% endif %}
          session_start: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor)|float(0) %}
            {% set burst_min_flow = this.attributes.burst_min_flow | default(0) %}
            {% set burst_max_flow = this.attributes.burst_max_flow | default(0) %}
            {% set prev_active = this.attributes.session_active | default(false) %}
            {% set prev_start = this.attributes.session_start | default(as_timestamp(now())) %}
            {% if flow >= burst_min_flow and flow <= burst_max_flow %}
              {% if prev_active %}
                {{ prev_start }}
              {% else %}
                {{ as_timestamp(now()) }}
              {% endif %}
            {% else %}
              {{ as_timestamp(now()) }}
            {% endif %}
          session_volume: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
            {% set flow = states(flow_sensor)|float(0) %}
            {% set burst_min_flow = this.attributes.burst_min_flow | default(0) %}
            {% set burst_max_flow = this.attributes.burst_max_flow | default(0) %}
            {% set prev_active = this.attributes.session_active | default(false) %}
            {% set prev_volume = this.attributes.session_volume | default(0) %}
            {% set integration = states(volume_sensor)|float(0) %}
            {% set prev_integration = this.attributes.prev_integration | default(integration) %}
            {% if flow >= burst_min_flow and flow <= burst_max_flow %}
              {% if prev_active %}
                {{ prev_volume + (integration - prev_integration) }}
              {% else %}
                0
              {% endif %}
            {% else %}
              0
            {% endif %}
          prev_flow: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {{ states(flow_sensor)|float(0) }}
          prev_integration: >
            {% set volume_sensor = this.attributes.volume_sensor | default('sensor.droplet_water_volume') %}
            {{ states(volume_sensor)|float(0) }}
          last_burst_volume: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor)|float(0) %}
            {% set session_active = this.attributes.session_active | default(false) %}
            {% set session_start = this.attributes.session_start | default(0) %}
            {% set burst_min_duration = this.attributes.burst_min_duration | default(0) %}
            {% set burst_max_duration = this.attributes.burst_max_duration | default(0) %}
            {% set duration = (as_timestamp(now()) - session_start) if session_active else 0 %}
            {% set session_volume = this.attributes.session_volume | default(0) %}
            {% if not session_active and session_volume > 0 and duration >= burst_min_duration and duration <= burst_max_duration %}
              {{ session_volume }}
            {% else %}
              {{ this.attributes.last_burst_volume | default(0) }}
            {% endif %}
          last_burst_end: >
            {% set flow_sensor = this.attributes.flow_sensor | default('sensor.droplet_flow_rate') %}
            {% set flow = states(flow_sensor)|float(0) %}
            {% set session_active = this.attributes.session_active | default(false) %}
            {% set session_start = this.attributes.session_start | default(0) %}
            {% set burst_min_duration = this.attributes.burst_min_duration | default(0) %}
            {% set burst_max_duration = this.attributes.burst_max_duration | default(0) %}
            {% set duration = (as_timestamp(now()) - session_start) if session_active else 0 %}
            {% if not session_active and duration >= burst_min_duration and duration <= burst_max_duration %}
              {{ as_timestamp(now()) }}
            {% else %}
              {{ this.attributes.last_burst_end | default(0) }}
            {% endif %}
          bursts: >
            {% set window = this.attributes.burst_window | default(0) %}
            {% set now_ts = as_timestamp(now()) %}
            {% set events_raw = this.attributes.bursts if this.attributes.bursts is defined else '[]' %}
            {% set events = events_raw if events_raw is iterable and events_raw is not string else (events_raw | from_json) %}
            {% set session_active = this.attributes.session_active | default(false) %}
            {% set last_burst_end = this.attributes.last_burst_end | default(0) %}
            {% set last_burst_volume = this.attributes.last_burst_volume | default(0) %}
            {% set pruned = events | selectattr('timestamp', '>', now_ts - window) | list %}
            {% if not session_active and last_burst_end == now_ts and last_burst_volume > 0 %}
              {{ (pruned + [ {'timestamp': now_ts, 'volume': last_burst_volume|round(2)} ]) | tojson }}
            {% else %}
              {{ pruned | tojson }}
            {% endif %}
  - platform: statistics
    unique_id: "low flow leak min 5m"
    name: Low Flow Leak Min 5m
    entity_id: sensor.low_flow_1m_update
    keep_last_sample: true
    max_age:
      minutes: 5
    state_characteristic: value_min
