# Water Leak Detection Package v5 (Final Correct with Simplified Toilet Burst)
#
# - Correct Last Water Session template with last_session_start_time
# - Simplified toilet burst sensor leveraging Last Water Session
# - No duplicate session tracking logic
# - Fixed sensor name references
# - Fully ready for Home Assistant 2024+

input_boolean:
  leaky_toilet_smart_detected:
    name: Leaky Toilet Detected (Smart)
    icon: mdi:toilet-alert
  low_flow_leak_detected:
    name: Low Flow Leak Detected
    icon: mdi:water-alert

input_button:
  acknowledge_leaky_toilet_smart:
    name: Acknowledge Leaky Toilet Alert (Smart)
    icon: mdi:check-decagram
  acknowledge_low_flow_leak:
    name: Acknowledge Low Flow Leak Alert
    icon: mdi:check-decagram

sensor:
  - name: "Low Flow 1m Update"
    unique_id: low_flow_1m_update
    unit_of_measurement: "GPM"
    device_class: water
    state_class: measurement
    state: >
      {% set val = states('sensor.droplet_flow_rate') | float(0) %}
      {% if 0 < val and val < 1 %}
        {{ val }}
      {% else %}
        0
      {% endif %}
    attributes:
      last_update: "{{ now() }}"
  - name: "Last Water Session"
    unique_id: "last_water_session"
    unit_of_measurement: "gallons"
    state: >
       {% set last_session_gallons = this.attributes.last_session_gallons | default(0) %}
       {{ last_session_gallons }}
    attributes:
      flow_sensor_value: >
       {{ states('sensor.droplet_flow_rate')|float(0) }}
      volume_sensor_value: >
       {{ states('sensor.droplet_water_volume')|float(0) }}
      min_session_volume: >
       {{ this.attributes.min_session_volume | default(0) }}
      min_session_duration: >
       {{ this.attributes.min_session_duration | default(0) }}
      # ---- Session State ----
      session_active: >
        {% set flow = this.attributes.flow_sensor_value | default(0) %}
        {{ flow > 0 }}
      
      # ---- Current Session ----
      session_start_time: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set prev_start = this.attributes.session_start_time | default(now().isoformat()) %}
         {% if flow > 0 %}
           {% if prev_active %}
             {{ prev_start }}
           {% else %}
             {{ now().isoformat() }}
           {% endif %}
         {% else %}
           {{ prev_start }}
         {% endif %}
      
      # Keep final values until session is processed
      session_duration: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set start = this.attributes.session_start_time | default(now().isoformat()) %}
         {% set prev_duration = this.attributes.session_duration | default(0) %}
         {% if flow > 0 %}
           {{ (as_timestamp(now()) - as_timestamp(start)) | int }}
         {% elif prev_active %}
           {{ (as_timestamp(now()) - as_timestamp(start)) | int }}
         {% else %}
           {{ prev_duration }}
         {% endif %}
      
      session_gallons: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set integration = this.attributes.volume_sensor_value | default(0) %}
         {% set prev_integration = this.attributes.prev_integration | default(integration) %}
         {% if flow > 0 %}
           {{ (integration - prev_integration) | round(4) }}
         {% elif prev_active %}
           {{ (integration - prev_integration) | round(4) }}
         {% else %}
           0
         {% endif %}
      
      # ---- Last Session (update when session ends and reset current) ----
      last_session_start_time: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set session_start = this.attributes.session_start_time | default(now().isoformat()) %}
         {% set session_duration = this.attributes.session_duration | default(0) %}
         {% set session_gallons = this.attributes.session_gallons | default(0) %}
         {% set min_volume = this.attributes.min_session_volume | default(0) %}
         {% set min_duration = this.attributes.min_session_duration | default(0) %}
         {% if prev_active and flow == 0 and session_duration >= min_duration and session_gallons >= min_volume %}
           {{ session_start }}
         {% else %}
           {{ this.attributes.last_session_start_time | default("") }}
         {% endif %}
      
      last_session_duration: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set session_duration = this.attributes.session_duration | default(0) %}
         {% set session_gallons = this.attributes.session_gallons | default(0) %}
         {% set min_volume = this.attributes.min_session_volume | default(0) %}
         {% set min_duration = this.attributes.min_session_duration | default(0) %}
         {% if prev_active and flow == 0 and session_duration >= min_duration and session_gallons >= min_volume %}
           {{ session_duration }}
         {% else %}
           {{ this.attributes.last_session_duration | default(0) }}
         {% endif %}
      
      last_session_gallons: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set session_duration = this.attributes.session_duration | default(0) %}
         {% set session_gallons = this.attributes.session_gallons | default(0) %}
         {% set min_volume = this.attributes.min_session_volume | default(0) %}
         {% set min_duration = this.attributes.min_session_duration | default(0) %}
         {% if prev_active and flow == 0 and session_duration >= min_duration and session_gallons >= min_volume %}
           {{ session_gallons }}
         {% else %}
           {{ this.attributes.last_session_gallons | default(0) }}
         {% endif %}
      
      # ---- Integration Tracking ----
      prev_integration: >
         {% set flow = this.attributes.flow_sensor_value | default(0) %}
         {% set integration = this.attributes.volume_sensor_value | default(0) %}
         {% set prev_active = this.attributes.session_active | default(false) %}
         {% set session_duration = this.attributes.session_duration | default(0) %}
         {% set session_gallons = this.attributes.session_gallons | default(0) %}
         {% set min_volume = this.attributes.min_session_volume | default(0) %}
         {% set min_duration = this.attributes.min_session_duration | default(0) %}
         {% set prev_integration = this.attributes.prev_integration | default(integration) %}
         {% if prev_active and flow == 0 and session_duration >= min_duration and session_gallons >= min_volume %}
           {{ integration }}
         {% elif not prev_active and flow > 0 %}
           {{ integration }}
         {% else %}
           {{ prev_integration }}
         {% endif %}
  - platform: template
    sensors:
      toilet_burst_session:
        friendly_name: "Toilet Burst Session"
        unit_of_measurement: "count"
        value_template: >
          {% set bursts_raw = state_attr('sensor.toilet_burst_session','bursts') or '[]' %}
          {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
          {% set min_group = this.attributes.burst_min_group | default(0) %}
          {% set threshold = this.attributes.burst_group_threshold | default(0) %}
          {% set max_group_size = namespace(value=0) %}
          {% for b in bursts %}
            {% set matches = bursts
              | selectattr('volume','>=',b.volume - threshold)
              | selectattr('volume','<=',b.volume + threshold)
              | list %}
            {% if matches | length > max_group_size.value %}
              {% set max_group_size.value = matches | length %}
            {% endif %}
          {% endfor %}
          {{ max_group_size.value }}
        attribute_templates:
          burst_min_flow: "{{ this.attributes.burst_min_flow | default(0.5) }}"
          burst_max_flow: "{{ this.attributes.burst_max_flow | default(2.5) }}"
          burst_min_duration: "{{ this.attributes.burst_min_duration | default(10) }}"
          burst_max_duration: "{{ this.attributes.burst_max_duration | default(60) }}"
          burst_window: "{{ this.attributes.burst_window | default(3600) }}"
          burst_min_group: "{{ this.attributes.burst_min_group | default(4) }}"
          burst_group_threshold: "{{ this.attributes.burst_group_threshold | default(0.3) }}"
          largest_group_count: >
            {% set bursts_raw = this.attributes.bursts or '[]' %}
            {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
            {% set threshold = this.attributes.burst_group_threshold | default(0) %}
            {% set max_group_size = namespace(value=0) %}
            {% for b in bursts %}
              {% set matches = bursts
                | selectattr('volume','>=',b.volume - threshold)
                | selectattr('volume','<=',b.volume + threshold)
                | list %}
              {% if matches | length > max_group_size.value %}
                {% set max_group_size.value = matches | length %}
              {% endif %}
            {% endfor %}
            {{ max_group_size.value }}
          largest_group_volumes: >
            {% set bursts_raw = this.attributes.bursts or '[]' %}
            {% set bursts = bursts_raw if bursts_raw is iterable and bursts_raw is not string else (bursts_raw | from_json) %}
            {% set threshold = this.attributes.burst_group_threshold | default(0) %}
            {% set max_group = namespace(volumes=[]) %}
            {% set max_size = namespace(value=0) %}
            {% for b in bursts %}
              {% set matches = bursts
                | selectattr('volume','>=',b.volume - threshold)
                | selectattr('volume','<=',b.volume + threshold)
                | list %}
              {% if matches | length > max_size.value %}
                {% set max_size.value = matches | length %}
                {% set max_group.volumes = matches | map(attribute='volume') | list %}
              {% endif %}
            {% endfor %}
            {{ max_group.volumes }}
          session_active: >
            {% set session_active = state_attr('sensor.last_water_session', 'session_active') | default(false) %}
            {% set flow = state_attr('sensor.last_water_session', 'flow_sensor_value') | default(0) %}
            {% set burst_min_flow = this.attributes.burst_min_flow | default(0.5) %}
            {% set burst_max_flow = this.attributes.burst_max_flow | default(2.5) %}
            {{ session_active and flow >= burst_min_flow and flow <= burst_max_flow }}
          current_session_volume: >
            {% set session_active = this.attributes.session_active | default(false) %}
            {% if session_active %}
              {{ state_attr('sensor.last_water_session', 'session_gallons') | default(0) }}
            {% else %}
              0
            {% endif %}
          last_burst_volume: >
            {% set session_active = state_attr('sensor.last_water_session', 'session_active') | default(false) %}
            {% set last_session_gallons = state_attr('sensor.last_water_session', 'last_session_gallons') | default(0) %}
            {% set last_session_duration = state_attr('sensor.last_water_session', 'last_session_duration') | default(0) %}
            {% set burst_min_duration = this.attributes.burst_min_duration | default(10) %}
            {% set burst_max_duration = this.attributes.burst_max_duration | default(60) %}
            {% if not session_active and last_session_gallons > 0 and last_session_duration >= burst_min_duration and last_session_duration <= burst_max_duration %}
              {{ last_session_gallons }}
            {% else %}
              {{ this.attributes.last_burst_volume | default(0) }}
            {% endif %}
          last_burst_start_time: >
            {% set session_active = state_attr('sensor.last_water_session', 'session_active') | default(false) %}
            {% set last_session_start_time = state_attr('sensor.last_water_session', 'last_session_start_time') | default("") %}
            {% set last_session_duration = state_attr('sensor.last_water_session', 'last_session_duration') | default(0) %}
            {% set burst_min_duration = this.attributes.burst_min_duration | default(10) %}
            {% set burst_max_duration = this.attributes.burst_max_duration | default(60) %}
            {% if not session_active and last_session_start_time != "" and last_session_duration >= burst_min_duration and last_session_duration <= burst_max_duration %}
              {{ last_session_start_time }}
            {% else %}
              {{ this.attributes.last_burst_start_time | default("") }}
            {% endif %}
          bursts: >
            {% set window = this.attributes.burst_window | default(3600) %}
            {% set now_ts = as_timestamp(now()) %}
            {% set events_raw = this.attributes.bursts if this.attributes.bursts is defined else '[]' %}
            {% set events = events_raw if events_raw is iterable and events_raw is not string else (events_raw | from_json) %}
            {% set session_active = state_attr('sensor.last_water_session', 'session_active') | default(false) %}
            {% set last_burst_start_time = this.attributes.last_burst_start_time | default("") %}
            {% set last_burst_volume = this.attributes.last_burst_volume | default(0) %}
            {% set pruned = events | selectattr('timestamp', '>', now_ts - window) | list %}
            {% if not session_active and last_burst_start_time != "" and last_burst_volume > 0 %}
              {{ (pruned + [ {'timestamp': as_timestamp(last_burst_start_time), 'volume': last_burst_volume|round(2)} ]) | tojson }}
            {% else %}
              {{ pruned | tojson }}
            {% endif %}
  - platform: statistics
    unique_id: "low flow leak min 5m"
    name: Low Flow Leak Min 5m
    entity_id: sensor.low_flow_1m_update
    keep_last_sample: true
    max_age:
      minutes: 5
    state_characteristic: value_min
